import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import { getProductsService } from './products.services';
import { Product } from '../typesIndex';

export interface ProductState {
    isLoading: boolean,
    currentProduct: Product  ,
    errorMessage: string ,
    productsList: Array<Product> ,
}

const initialState: ProductState = {
    isLoading: false,
    currentProduct: {},
    errorMessage: "",
    productsList: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getProductsAsync = createAsyncThunk(
  'products/getProducts',
  async () => {
    console.log("getProductsAsync")
    const response = await getProductsService();
    console.log(response.data)
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const ProductsSlice = createSlice({
  name: 'Products',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    getProducts: (state,action: PayloadAction<Array<Product>>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.productsList.concat(action.payload);
    },
    // getProduct: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getProductsAsync.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(getProductsAsync.fulfilled, (state, action) => {
        state.isLoading = false;
        state.productsList = state.productsList.concat(action.payload);
        console.log("action.payload",action.payload)
      })
      .addCase(getProductsAsync.rejected, (state) => {
        state.isLoading = false;
      });
  },
});

export const { getProducts ,} = ProductsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const productsList = (state: RootState) => state.products.productsList;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default ProductsSlice.reducer;
